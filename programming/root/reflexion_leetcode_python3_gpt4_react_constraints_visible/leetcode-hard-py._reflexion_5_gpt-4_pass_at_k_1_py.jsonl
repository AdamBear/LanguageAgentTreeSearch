{"task_id": "median-of-two-sorted-arrays", "prompt": "# Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.\n# \n# \n# Example 1:\n# Input: nums1 = [1,3], nums2 = [2]\n# Output: 2.00000\n# Explanation: merged array = [1,2,3] and median is 2.\n# \n# \n# Example 2:\n# Input: nums1 = [1,2], nums2 = [3,4]\n# Output: 2.50000\n# Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n# \n# \n# Example 3:\n# Input: nums1 = [0,0], nums2 = [0,0]\n# Output: 0.00000\n# \n# Example 4:\n# Input: nums1 = [], nums2 = [1]\n# Output: 1.00000\n# \n# Example 5:\n# Input: nums1 = [2], nums2 = []\n# Output: 2.00000\n# \n# Constraints:\n# `nums1.length == m`\n# `nums2.length == n`\n# `0 <= m <= 1000`\n# `0 <= n <= 1000`\n# `1 <= m + n <= 2000`\n# `-106 <= nums1[i], nums2[i] <= 106`\n# Follow up: The overall run time complexity should be `O(log (m+n))`.\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        ", "entry_point": "findMedianSortedArrays", "cannonical_solution": "", "test": "", "is_solved": false, "reflections": [], "implementations": ["from typing import List\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        nums = sorted(nums1 + nums2)\n        length = len(nums)\n        if length % 2 == 0:\n            return (nums[length//2 - 1] + nums[length//2]) / 2\n        else:\n            return nums[length//2]"], "test_feedback": ["Tested passed:\nassert Solution().findMedianSortedArrays([1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16]) == 8.5\n\nTests failed:"], "solution": "from typing import List\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        nums = sorted(nums1 + nums2)\n        length = len(nums)\n        if length % 2 == 0:\n            return (nums[length//2 - 1] + nums[length//2]) / 2\n        else:\n            return nums[length//2]", "acc": 0.0}
{"task_id": "regular-expression-matching", "prompt": "# Given an input string (`s`) and a pattern (`p`), implement regular expression matching with support for `'.'` and `'*'` where:` `\n# `'.'` Matches any single character.​​​​\n# `'*'` Matches zero or more of the preceding element.\n# \n# The matching should cover the entire input string (not partial).\n# \n# \n# Example 1:\n# Input: s = \"aa\", p = \"a\"\n# Output: false\n# Explanation: \"a\" does not match the entire string \"aa\".\n# \n# \n# Example 2:\n# Input: s = \"aa\", p = \"a*\"\n# Output: true\n# Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n# \n# \n# Example 3:\n# Input: s = \"ab\", p = \".*\"\n# Output: true\n# Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n# \n# \n# Example 4:\n# Input: s = \"aab\", p = \"c*a*b\"\n# Output: true\n# Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \"aab\".\n# \n# \n# Example 5:\n# Input: s = \"mississippi\", p = \"mis*is*p*.\"\n# Output: false\n# \n# Constraints:\n# `0 <= s.length <= 20`\n# `0 <= p.length <= 30`\n# `s` contains only lowercase English letters.\n# \n# `p` contains only lowercase English letters, `'.'`, and `'*'`.\n# \n# It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ", "entry_point": "isMatch", "cannonical_solution": "", "test": "", "is_solved": false, "reflections": [], "implementations": ["class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        \n        dp[-1][-1] = True\n        for i in range(len(s), -1, -1):\n            for j in range(len(p) - 1, -1, -1):\n                first_match = i < len(s) and p[j] in {s[i], '.'}\n                if j+1 < len(p) and p[j+1] == '*':\n                    dp[i][j] = dp[i][j+2] or first_match and dp[i+1][j]\n                else:\n                    dp[i][j] = first_match and dp[i+1][j+1]\n\n        return dp[0][0]"], "test_feedback": ["Tested passed:\nassert Solution().isMatch(\"abc\", \".*a\") == False\n\nTests failed:"], "solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        \n        dp[-1][-1] = True\n        for i in range(len(s), -1, -1):\n            for j in range(len(p) - 1, -1, -1):\n                first_match = i < len(s) and p[j] in {s[i], '.'}\n                if j+1 < len(p) and p[j+1] == '*':\n                    dp[i][j] = dp[i][j+2] or first_match and dp[i+1][j]\n                else:\n                    dp[i][j] = first_match and dp[i+1][j+1]\n\n        return dp[0][0]", "acc": 0.0}
